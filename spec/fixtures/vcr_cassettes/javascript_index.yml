---
http_interactions:
- request:
    method: get
    uri: https://codinglessons-112e8fb1f399.herokuapp.com/api/v1/javascript
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Date:
      - Thu, 01 Aug 2024 16:49:59 GMT
      Report-To:
      - '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1722530999&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=GoXLbXavYLgi3WcDus6vPELxELvtgJXPa4hFJ2BW6yI%3D"}]}'
      Reporting-Endpoints:
      - heroku-nel=https://nel.heroku.com/reports?ts=1722530999&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=GoXLbXavYLgi3WcDus6vPELxELvtgJXPa4hFJ2BW6yI%3D
      Nel:
      - '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}'
      Connection:
      - keep-alive
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Content-Type:
      - application/json; charset=utf-8
      Vary:
      - Accept
      Etag:
      - W/"97fc29364d1e6ffa266be5dd79b821d2"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - 8b11a44b-c03e-4cd4-90e5-d57066580d8d
      X-Runtime:
      - '0.043947'
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
      Content-Length:
      - '2030'
      Via:
      - 1.1 vegur
    body:
      encoding: UTF-8
      string: '{"data":[{"id":"1","type":"lesson","attributes":{"lesson":"Objects:\n  Objects
        are used to store collections of data and more complex entities. They are
        created using curly braces {} and can contain properties.\n  let person =
        {\n    name: ''Alice'',\n    age: 30,\n    height: 5.6\n    };\n    The person
        object has three properties: name, age, and height. Properties can be accessed
        using dot notation or bracket notation.\n    console.log(person.name); //
        ''Alice''\n    console.log(person[''age'']); // 30\n    To add or update a
        property, you can simply assign a value to it.\n    person.city = ''New York'';
        // Add a new property\n    person.age = 31; // Update an existing property","topic":"Objects","link":"https://www.example.com/javascript_lessons/1"}},{"id":"2","type":"lesson","attributes":{"lesson":"Functions:\n  Functions
        are reusable blocks of code that perform a specific task. They are defined
        using the function keyword followed by the function name and parentheses.
        The code block is enclosed in curly braces.\n  function greet(name) {\n    return
        ''Hello, '' + name + ''!'';\n    }\n    The function greet takes a name as
        an argument and returns a greeting message. Functions can take multiple arguments
        and return a value.\n    let result = greet(''Alice''); // ''Hello, Alice!''","topic":"Functions","link":"https://www.example.com/javascript_lessons/1"}},{"id":"3","type":"lesson","attributes":{"lesson":"Conditional
        Statements:\n  Conditional statements allow us to execute different code based
        on different conditions.\n  let number = 10;\n\n  if (number \u003e 5) {\n    console.log(''The
        number is greater than 5.'');\n  } else if (number === 5) {\n    console.log(''The
        number is equal to 5.'');\n  } else {\n    console.log(''The number is less
        than 5.'');\n  }\n  Conditions are checked in order, and the first true condition
        executes its block.\n  === checks for strict equality, \u003e and \u003c for
        greater or lesser comparisons.","topic":"Conditional Logic","link":"https://www.example.com/javascript_lessons/1"}}]}'
  recorded_at: Thu, 01 Aug 2024 16:49:59 GMT
- request:
    method: get
    uri: https://codinglessons-112e8fb1f399.herokuapp.com/api/v1/javascript/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Date:
      - Thu, 01 Aug 2024 16:49:59 GMT
      Report-To:
      - '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1722530999&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=GoXLbXavYLgi3WcDus6vPELxELvtgJXPa4hFJ2BW6yI%3D"}]}'
      Reporting-Endpoints:
      - heroku-nel=https://nel.heroku.com/reports?ts=1722530999&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=GoXLbXavYLgi3WcDus6vPELxELvtgJXPa4hFJ2BW6yI%3D
      Nel:
      - '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}'
      Connection:
      - keep-alive
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Content-Type:
      - application/json; charset=utf-8
      Vary:
      - Accept
      Etag:
      - W/"756de96c2ac675b2ff393e046436f815"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - 96423f24-3c79-4729-b885-9f4589836412
      X-Runtime:
      - '0.009010'
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
      Content-Length:
      - '755'
      Via:
      - 1.1 vegur
    body:
      encoding: UTF-8
      string: '{"data":{"id":"1","type":"lesson","attributes":{"lesson":"Objects:\n  Objects
        are used to store collections of data and more complex entities. They are
        created using curly braces {} and can contain properties.\n  let person =
        {\n    name: ''Alice'',\n    age: 30,\n    height: 5.6\n    };\n    The person
        object has three properties: name, age, and height. Properties can be accessed
        using dot notation or bracket notation.\n    console.log(person.name); //
        ''Alice''\n    console.log(person[''age'']); // 30\n    To add or update a
        property, you can simply assign a value to it.\n    person.city = ''New York'';
        // Add a new property\n    person.age = 31; // Update an existing property","topic":"Objects","link":"https://www.example.com/javascript_lessons/1"}}}'
  recorded_at: Thu, 01 Aug 2024 16:49:59 GMT
recorded_with: VCR 6.2.0
